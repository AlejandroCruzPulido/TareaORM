{"ast":null,"code":"var _class;\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst endpoint = 'http://localhost:8080/car';\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/x-www-form-urlencoded'\n  })\n};\nclass CarService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    // Agrega un Subject para notificar actualizaciones\n    this.carUpdatedSource = new Subject();\n    // Observable para que otras partes de la aplicación puedan suscribirse a las actualizaciones\n    this.carUpdated$ = this.carUpdatedSource.asObservable();\n  }\n  getCars() {\n    return this.httpClient.get(endpoint);\n  }\n  add(car) {\n    let body = new URLSearchParams();\n    body.append(\"marca\", car.marca);\n    body.append(\"modelo\", car.modelo);\n    body.append(\"precio\", car.precio.toString());\n    body.append(\"descripcion\", car.descripcion);\n    return this.httpClient.post(endpoint, body.toString(), httpOptions);\n  }\n  updateCar(carId, updatedCar) {\n    const updateUrl = `${endpoint}/${carId}`;\n    let body = new URLSearchParams();\n    body.append(\"marca\", updatedCar.marca);\n    body.append(\"modelo\", updatedCar.modelo);\n    body.append(\"precio\", updatedCar.precio.toString());\n    body.append(\"descripcion\", updatedCar.descripcion);\n    return this.httpClient.put(updateUrl, body.toString(), httpOptions);\n  }\n  notifyCarUpdated() {\n    this.carUpdatedSource.next();\n  }\n  getCarById(carId, updatedCar) {\n    this.notifyCarUpdated();\n    return this.httpClient.put(`${endpoint}/${carId}`, updatedCar, httpOptions);\n  }\n}\n_class = CarService;\n_class.ɵfac = function CarService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport { CarService };","map":{"version":3,"names":["HttpHeaders","endpoint","httpOptions","headers","CarService","constructor","httpClient","carUpdatedSource","Subject","carUpdated$","asObservable","getCars","get","add","car","body","URLSearchParams","append","marca","modelo","precio","toString","descripcion","post","updateCar","carId","updatedCar","updateUrl","put","notifyCarUpdated","next","getCarById","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\sombr\\Documents\\PGL\\prueba\\Cars\\src\\app\\services\\car.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nconst endpoint = 'http://localhost:8080/car';\n\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/x-www-form-urlencoded'\n  })\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CarService {\n    // Agrega un Subject para notificar actualizaciones\n    private carUpdatedSource = new Subject<void>();\n\n    // Observable para que otras partes de la aplicación puedan suscribirse a las actualizaciones\n    carUpdated$ = this.carUpdatedSource.asObservable();\n  constructor(private httpClient: HttpClient) { }\n\n  getCars() {\n    return this.httpClient.get(endpoint);\n  }\n\n  add(car: any) {\n    let body = new URLSearchParams();\n    body.append(\"marca\", car.marca);\n    body.append(\"modelo\", car.modelo);\n    body.append(\"precio\", car.precio.toString());\n    body.append(\"descripcion\", car.descripcion);\n\n    return this.httpClient.post(endpoint, body.toString(), httpOptions);\n  }\n\n  updateCar(carId: number, updatedCar: any): Observable<any> {\n    const updateUrl = `${endpoint}/${carId}`;\n    let body = new URLSearchParams();\n    body.append(\"marca\", updatedCar.marca);\n    body.append(\"modelo\", updatedCar.modelo);\n    body.append(\"precio\", updatedCar.precio.toString());\n    body.append(\"descripcion\", updatedCar.descripcion);\n\n    return this.httpClient.put(updateUrl, body.toString(), httpOptions);\n  }\n\n  notifyCarUpdated() {\n    this.carUpdatedSource.next();\n  }\n\n  getCarById(carId: number, updatedCar: any): Observable<any> {\n    this.notifyCarUpdated();\n\n    return this.httpClient.put(`${endpoint}/${carId}`, updatedCar, httpOptions);\n  }\n}\n"],"mappings":";AACA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAG9D,MAAMC,QAAQ,GAAG,2BAA2B;AAE5C,MAAMC,WAAW,GAAG;EAClBC,OAAO,EAAE,IAAIH,WAAW,CAAC;IACvB,cAAc,EAAE;GACjB;CACF;AAED,MAGaI,UAAU;EAMrBC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAL5B;IACQ,KAAAC,gBAAgB,GAAG,IAAIC,OAAO,EAAQ;IAE9C;IACA,KAAAC,WAAW,GAAG,IAAI,CAACF,gBAAgB,CAACG,YAAY,EAAE;EACN;EAE9CC,OAAOA,CAAA;IACL,OAAO,IAAI,CAACL,UAAU,CAACM,GAAG,CAACX,QAAQ,CAAC;EACtC;EAEAY,GAAGA,CAACC,GAAQ;IACV,IAAIC,IAAI,GAAG,IAAIC,eAAe,EAAE;IAChCD,IAAI,CAACE,MAAM,CAAC,OAAO,EAAEH,GAAG,CAACI,KAAK,CAAC;IAC/BH,IAAI,CAACE,MAAM,CAAC,QAAQ,EAAEH,GAAG,CAACK,MAAM,CAAC;IACjCJ,IAAI,CAACE,MAAM,CAAC,QAAQ,EAAEH,GAAG,CAACM,MAAM,CAACC,QAAQ,EAAE,CAAC;IAC5CN,IAAI,CAACE,MAAM,CAAC,aAAa,EAAEH,GAAG,CAACQ,WAAW,CAAC;IAE3C,OAAO,IAAI,CAAChB,UAAU,CAACiB,IAAI,CAACtB,QAAQ,EAAEc,IAAI,CAACM,QAAQ,EAAE,EAAEnB,WAAW,CAAC;EACrE;EAEAsB,SAASA,CAACC,KAAa,EAAEC,UAAe;IACtC,MAAMC,SAAS,GAAG,GAAG1B,QAAQ,IAAIwB,KAAK,EAAE;IACxC,IAAIV,IAAI,GAAG,IAAIC,eAAe,EAAE;IAChCD,IAAI,CAACE,MAAM,CAAC,OAAO,EAAES,UAAU,CAACR,KAAK,CAAC;IACtCH,IAAI,CAACE,MAAM,CAAC,QAAQ,EAAES,UAAU,CAACP,MAAM,CAAC;IACxCJ,IAAI,CAACE,MAAM,CAAC,QAAQ,EAAES,UAAU,CAACN,MAAM,CAACC,QAAQ,EAAE,CAAC;IACnDN,IAAI,CAACE,MAAM,CAAC,aAAa,EAAES,UAAU,CAACJ,WAAW,CAAC;IAElD,OAAO,IAAI,CAAChB,UAAU,CAACsB,GAAG,CAACD,SAAS,EAAEZ,IAAI,CAACM,QAAQ,EAAE,EAAEnB,WAAW,CAAC;EACrE;EAEA2B,gBAAgBA,CAAA;IACd,IAAI,CAACtB,gBAAgB,CAACuB,IAAI,EAAE;EAC9B;EAEAC,UAAUA,CAACN,KAAa,EAAEC,UAAe;IACvC,IAAI,CAACG,gBAAgB,EAAE;IAEvB,OAAO,IAAI,CAACvB,UAAU,CAACsB,GAAG,CAAC,GAAG3B,QAAQ,IAAIwB,KAAK,EAAE,EAAEC,UAAU,EAAExB,WAAW,CAAC;EAC7E;;SAzCWE,UAAU;;mBAAVA,MAAU,EAAA4B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAV/B,MAAU;EAAAgC,OAAA,EAAVhC,MAAU,CAAAiC,IAAA;EAAAC,UAAA,EAFT;AAAM;SAEPlC,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}